#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'logger'
require 'optparse'
require 'tftp'

config = {:path => Dir.pwd, :address => '0.0.0.0',
          :loglevel => Logger::INFO,
          :no_read => false, :no_write => false}

def die!(msg)
  STDERR.puts msg
  exit(2)
end

op = OptionParser.new do |o|
  o.banner = "Usage: #{$PROGRAM_NAME} [OPTIONS] PORT"
  o.on('-V', '--version', 'Show version and exit') do
    puts "fx-tftpd v#{TFTP::VERSION} Copyright (c) 2015, Piotr S. Staszewski"
    exit
  end
  o.on('-d', '--debug', 'Enable debug output')                {    config[:loglevel]  = Logger::DEBUG }
  o.on('-m', '--mode MODE', String, 'Run in R/W only mode')   do |a|
    case a.downcase[0]
    when 'r'
      config[:no_write] = true
    when 'w'
      config[:no_read]  = true
    else
      config[:bad_mode] = true
    end
  end
  o.on('-a', '--address ADDRESS', String, 'Listen on this address (default: 0.0.0.0)') {|a| config[:address] = a }
  o.on('-p', '--path PATH', String, 'Serving root directory') {|a| config[:path]      = a }
end
op.parse! or die!(op)
die!(op) if config[:bad_mode]

die!('Serving root does not exists') unless File.exists? config[:path]

PORT = ARGV.shift.to_i
die!(op) if PORT < 1 || PORT > 65535

log = Logger.new(STDOUT)
log.level = config[:loglevel]
log.formatter = lambda {|s, d, p, m| "#{d.strftime('%Y-%m-%d %H:%M:%S.%3N')} | #{s.ljust(5)} | #{m}\n" }

config[:logger] = log
config[:port]   = PORT

begin
  log.info "Serving from and to #{config[:path]}"
  srv = TFTP::Server::RWSimple.new(config[:path], config)
  srv.run!
rescue SignalException => e
  puts if e.is_a? Interrupt
  srv.stop
end

if Thread.list.length > 1
  log.info 'Waiting for outstanding connections'
  Thread.stop
end
